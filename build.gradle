plugins {
    id 'signing'
    id("io.github.gradle-nexus.publish-plugin") version "1.1.0"
}

apply plugin: 'java'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group 'com.transloadit.sdk'

def config = new ConfigSlurper().parse(new File("${projectDir}/src/main/resources/version.properties").toURI().toURL())
version = config.versionNumber
description = "A Java Integration of the Transloadit's (https://transloadit.com) file uploading and encoding service."

allprojects {
    repositories {
        mavenCentral()
    }
}

dependencies {
    implementation 'org.jetbrains:annotations:22.0.0'
    implementation 'io.tus.java.client:tus-java-client:0.4.5'
    implementation 'joda-time:joda-time:2.10.13'
    implementation 'com.squareup.okhttp3:okhttp:4.9.2'
    implementation 'org.json:json:20210307'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'io.socket:socket.io-client:1.0.1'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mock-server:mockserver-junit-rule:5.11.2'
    testImplementation  'org.mockito:mockito-core:3.11.1'


}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

def pomConfig = {
    name 'transloadit'
    url 'https://github.com/transloadit/java-sdk'
    licenses {
        license {
            name 'The MIT License (MIT)'
            url 'http://opensource.org/licenses/MIT'
        }
    }

    developers {
        developer {
            id 'Transloadit'
            name 'Transloadit'
            email 'support@transloadit.com'
        }
    }

    scm {
        url 'https://github.com/transloadit/java-sdk'
        connection 'https://github.com/transloadit/java-sdk'
        developerConnection 'https://github.com/transloadit/java-sdk'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId project.getGroup()
            artifactId 'transloadit'
            version project.getVersion()
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                def root = asNode()
                root.appendNode('description', project.getDescription())
                root.children().last() + pomConfig
            }
        }
    }
    
    /* Keeping this as fallback in case of a failure within the nexus-publishing plugin
    repositories {
        maven {
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            if (version.toString().toLowerCase().endsWith("snapshot")) {
                url = "https://s01.oss.sonatype.org/content/repositories/snapshots/" // For Snapshot testing
            }

            credentials {
                username = System.getenv("SONATYPE_USER")
                password = System.getenv("SONATYPE_KEY")
            }
        }
    }
    */
}
signing{
    def signingKeyId = System.getenv("SIGNING_KEY_ID")
    def signingPassword = System.getenv("SIGNING_KEY_PASSWORD")
    def signingKey = System.getenv("SIGNING_KEY_AMORED")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv("SONATYPE_USER")
            password = System.getenv("SONATYPE_KEY")
        }
    }
}
